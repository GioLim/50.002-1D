module test_rig (
    input clk,  // clock
    input rst,  // reset
    input alu[8], // input from alu module
    output testA[8], // test outputs to alu module
    output testB[8],
    output alufn[6]
  ) {


fsm state(.clk(clk), .rst(rst)) = {ADDTEST0, ADDTEST1, ADDTEST2, ADDTEST3}; 
dff counter[28](.clk(clk), .rst(rst));
sig getNextState;
sig a[8];
sig b[8];
sig alufunc[6];
  
  always {
    
    testA = 0;
    testB = 0;
    alufn = 0;    
    
    counter.d = counter.q + 1;
    if (counter.q == 28hfffffff) {
      getNextState = 1;
    } else {
      getNextState = 0;
    }
    
    case (state.q) {
    
      state.ADDTEST0:
        testA = 8b10101010;
        testB = 8b01010101;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8hff) {
            state.d = state.ADDTEST1;
          }  
        } else {
          state.d = state.ADDTEST0;
        }
        
      state.ADDTEST1:
        testA = 8b00000000;
        testB = 8b10101010;
        alufn = 6h00;
      
        if (getNextState == 1) {
          if (alu == 8haa) {
            state.d = state.ADDTEST2;
          }  
        } else {
          state.d = state.ADDTEST1;
        }  
        
      state.ADDTEST2:
        testA = 8b00000000;
        testB = 8b00000000;
        alufn = 6h01;
      
        if (getNextState == 1) {
          if (alu == 8haa) {
            state.d = state.ADDTEST3;
          }  
        } else {
          state.d = state.ADDTEST2;
        } 
    }
  }
}
