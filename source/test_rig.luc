module test_rig (
    input clk,  // clock
    input rst,  // reset
    input alu[8], // input from alu module
    input test[3], // z, v, n input from alu module
    input selector[3],
    output testA[8], // test outputs to alu module
    output testB[8],
    output alufn[6],
    input reset
  ) {


//  fsm state(.clk(clk), .rst(rst)) = {ADDERTEST, MULTEST, BOOLETEST, SHIFTTEST, CMPTEST}; 
//  dff counter[28](.clk(clk), .rst(rst));

  sig select[3];
  
  adder_test adderTest(.clk(clk), .rst(rst), .alu(alu), .test(test), .reset(reset));
  mul_test mulTest(.clk(clk), .rst(rst), .alu(alu), .test(test), .reset(reset));
  boole_test booleTest(.clk(clk), .rst(rst), .alu(alu), .test(test), .reset(reset));
  shift_test shiftTest(.clk(clk), .rst(rst), .alu(alu), .reset(reset));
  cmp_test cmpTest(.clk(clk), .rst(rst), .alu(alu), .reset(reset));
  
  
  
  always {
    testA = 0;
    testB = 0;
    alufn = 0;
    select = selector;
    
    if (select == 3h0) {
      testA = adderTest.testA;
      testB = adderTest.testB;
      alufn = adderTest.alufn;  
    } else if (select == 3h1) {
      testA = mulTest.testA;
      testB = mulTest.testB;
      alufn = mulTest.alufn;
    } else if (select == 3h2) {
      testA = booleTest.testA;
      testB = booleTest.testB;
      alufn = booleTest.alufn;
    } else if (select == 3h3) {
      testA = shiftTest.testA;
      testB = shiftTest.testB;
      alufn = shiftTest.alufn;
    } else if (select == 3h4) {
      testA = cmpTest.testA;
      testB = cmpTest.testB;
      alufn = cmpTest.alufn;
    }
  }
}
